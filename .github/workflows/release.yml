name: Release
on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main
  push:
    tags:
      - 'v*'
env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive: zip
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            archive: zip
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            archive: zip
          - target: x86_64-apple-darwin
            os: macos-13
            archive: tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            archive: tar.gz
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            archive: tar.gz
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            archive: tar.gz
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
          - target: armv7-unknown-linux-musleabihf
            os: ubuntu-latest
            archive: tar.gz
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Setup rust toolchain and cache
        uses: moonrepo/setup-rust@ede6de059f8046a5e236c94046823e2af11ca670 # v1.2.2
        with:
          channel: stable
          targets: ${{ matrix.target }}
      - name: Install zig
        uses: mlugg/setup-zig@8d6198c65fb0feaa111df26e6b467fea8345e46f # v2.0.5
        with:
          version: 0.15.1
          use-cache: false
      - name: Install cross-compilation tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          sudo apt-get install -y golang-go cmake gcc openssl libssl-dev
          cargo install cross --git https://github.com/cross-rs/cross
      - name: Build (cross)
        if: runner.os == 'Linux' && matrix.target != 'x86_64-unknown-linux-musl'
        run: cross build --release --target ${{ matrix.target }}
      - name: Build (native Linux musl)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: cargo build --release --target ${{ matrix.target }}
      - name: Build (other targets)
        if: matrix.target != 'x86_64-unknown-linux-musl' && runner.os != 'Linux'
        run: cargo build --release --target ${{ matrix.target }}
      - name: Get OUT_DIR for completions and man pages
        id: outdir
        shell: bash
        run: |
          OUT_DIR=$(find target/${{ matrix.target }}/release/build/changelogen-*/out -type d | head -n 1)
          echo "out_dir=$OUT_DIR" >> $GITHUB_OUTPUT
      - name: Create archive (Windows)
        if: matrix.archive == 'zip'
        shell: pwsh
        run: |
          $binary = "target/${{ matrix.target }}/release/changelogen.exe"
          $completions = "$env:STEPS_OUTDIR_OUTPUTS_OUT_DIR/completions"
          $man = "$env:STEPS_OUTDIR_OUTPUTS_OUT_DIR/man"
          $archive = "changelogen-${{ matrix.target }}.zip"

          New-Item -ItemType Directory -Path "changelogen" -Force
          Copy-Item $binary "changelogen/changelogen.exe"
          Copy-Item $completions "changelogen/" -Recurse -Container
          Copy-Item $man "changelogen/" -Recurse -Container

          Compress-Archive -Path "changelogen" -DestinationPath $archive
        env:
          STEPS_OUTDIR_OUTPUTS_OUT_DIR: ${{ steps.outdir.outputs.out_dir }}
      - name: Create archive (Unix)
        if: matrix.archive == 'tar.gz'
        shell: bash
        run: |
          binary="target/${{ matrix.target }}/release/changelogen"
          completions="${STEPS_OUTDIR_OUTPUTS_OUT_DIR}/completions"
          man="${STEPS_OUTDIR_OUTPUTS_OUT_DIR}/man"
          archive="changelogen-${{ matrix.target }}.tar.gz"

          tar czf "$archive" "$binary" "$completions" "$man"
        env:
          STEPS_OUTDIR_OUTPUTS_OUT_DIR: ${{ steps.outdir.outputs.out_dir }}
      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: changelogen-${{ matrix.target }}
          path: changelogen-${{ matrix.target }}.${{ matrix.archive }}
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      id-token: write
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Setup rust toolchain and cache
        uses: moonrepo/setup-rust@ede6de059f8046a5e236c94046823e2af11ca670 # v1.2.2
        with:
          channel: stable
      - name: Publish to crates.io
        run: cargo publish
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          path: artifacts
      - name: Create Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        with:
          files: artifacts/changelogen-*/*
          generate_release_notes: true
