[package]
name = "novalyn"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
description = "ðŸ’… Beautiful Changelogs using Conventional Commits"
readme = "../../README.md"
repository.workspace = true
license.workspace = true
keywords = [
  "changelog",
  "cli",
  "conventional-commit",
  "generator",
  "git",
  "markdown",
]
categories = ["command-line-utilities", "development-tools"]

[lib]
name = "novalyn"
path = "src/lib.rs"

[[bench]]
harness = false
name = "parse_performance"
path = "../../benches/parse_performance.rs"

[dependencies]
anyhow.workspace = true
clap.workspace = true
clap_complete.workspace = true
clap_complete_nushell.workspace = true
demand.workspace = true
ecow.workspace = true
foldhash.workspace = true
git2.workspace = true
jiff.workspace = true
memchr.workspace = true
once_cell.workspace = true
rayon.workspace = true
reqwest.workspace = true
rustls.workspace = true
scc.workspace = true
semver.workspace = true
serde.workspace = true
serde_json.workspace = true
thiserror.workspace = true
tokio.workspace = true
toml_edit.workspace = true
tracing.workspace = true
tracing-subscriber.workspace = true
unicode-normalization.workspace = true
urlencoding.workspace = true

[dev-dependencies]
assert_cmd.workspace = true
assert_fs.workspace = true
divan.workspace = true
insta.workspace = true
predicates.workspace = true
proptest.workspace = true
tempfile.workspace = true
wiremock.workspace = true

[build-dependencies]
clap = { workspace = true }
clap_complete.workspace = true
clap_complete_nushell.workspace = true
clap_mangen.workspace = true

[target.'cfg(not(target_env = "msvc"))'.dependencies]
mimalloc-safe = { workspace = true, features = ["extended"] }

[target.'cfg(target_arch = "aarch64")'.dependencies]
mimalloc-safe = { workspace = true, features = ["extended", "no_opt_arch"] }

[target.'cfg(target_env = "msvc")'.dependencies]
mimalloc-safe = { workspace = true, features = ["extended", "override"] }
