/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/**
 * Options for generating changelog
 */
export interface GenerateOptions {
  /** Working directory (defaults to current directory) */
  cwd?: string
  /** Starting git reference (tag, branch, or commit) */
  from?: string
  /** Ending git reference (defaults to HEAD) */
  to?: string
  /** Path to output file (defaults to CHANGELOG.md) */
  output?: string
  /** Whether to write to file or return as string */
  write?: boolean
  /** Exclude authors from changelog */
  excludeAuthors?: Array<string>
  /** Don't include authors section */
  noAuthors?: boolean
  /** Dry run mode (no file system changes) */
  dryRun?: boolean
}

/**
 * Options for release command
 */
export interface ReleaseOptions {
  /** Working directory (defaults to current directory) */
  cwd?: string
  /** Starting git reference (tag, branch, or commit) */
  from?: string
  /** Ending git reference (defaults to HEAD) */
  to?: string
  /** Explicit version to use (overrides inference) */
  newVersion?: string
  /** Path to output file (defaults to CHANGELOG.md) */
  output?: string
  /** Sign git tag */
  sign?: boolean
  /** Exclude authors from changelog */
  excludeAuthors?: Array<string>
  /** Don't include authors section */
  noAuthors?: boolean
  /** Dry run mode (no file system changes) */
  dryRun?: boolean
  /** Skip confirmation prompts */
  yes?: boolean
}

/**
 * Result of generate operation
 */
export interface GenerateResult {
  /** Generated changelog markdown */
  content: string
  /** Number of commits processed */
  commits: number
  /** Version tag used */
  version?: string
}

/**
 * Result of release operation
 */
export interface ReleaseResult {
  /** Generated changelog markdown */
  content: string
  /** Number of commits processed */
  commits: number
  /** Previous version */
  previousVersion: string
  /** New version created */
  newVersion: string
  /** Whether a tag was created */
  tagCreated: boolean
}

/**
 * Generate changelog from git history
 *
 * @param options - Configuration options for changelog generation
 * @returns Promise resolving to generated changelog content and metadata
 *
 * @example
 * ```typescript
 * import { generate } from 'changelogen';
 *
 * const result = await generate({
 *   from: 'v1.0.0',
 *   to: 'HEAD',
 *   write: true
 * });
 *
 * console.log(`Generated changelog with ${result.commits} commits`);
 * ```
 */
export function generate(options?: GenerateOptions | undefined | null): Promise<GenerateResult>

/**
 * Perform full release: version bump, changelog generation, and git tag creation
 *
 * @param options - Configuration options for release
 * @returns Promise resolving to release result with version information
 *
 * @example
 * ```typescript
 * import { release } from 'changelogen';
 *
 * const result = await release({
 *   dryRun: true,
 *   yes: true
 * });
 *
 * console.log(`Release ${result.newVersion} (from ${result.previousVersion})`);
 * ```
 */
export function release(options?: ReleaseOptions | undefined | null): Promise<ReleaseResult>

/**
 * Get the next semantic version based on commits
 *
 * @param options - Configuration options
 * @returns Promise resolving to the next version string
 *
 * @example
 * ```typescript
 * import { showVersion } from 'changelogen';
 *
 * const version = await showVersion({ from: 'v1.0.0' });
 * console.log(`Next version: ${version}`);
 * ```
 */
export function showVersion(options?: GenerateOptions | undefined | null): Promise<string>
