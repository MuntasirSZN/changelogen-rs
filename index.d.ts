/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/**
 * JavaScript-compatible configuration options
 */
export interface JsConfigOptions {
  /** Working directory (defaults to current directory) */
  cwd?: string;
  /** Starting reference (commit/tag/branch) */
  from?: string;
  /** Ending reference (commit/tag/branch) */
  to?: string;
  /** Override the new version */
  newVersion?: string;
  /** Exclude authors by name or email */
  excludeAuthors?: Array<string>;
  /** Hide author emails in output */
  hideAuthorEmail?: boolean;
  /** Suppress all author attribution */
  noAuthors?: boolean;
  /** GitHub token for API access */
  githubToken?: string;
  /** Disable GitHub handle aliasing */
  noGithubAlias?: boolean;
}

/**
 * Result of version inference
 */
export interface JsVersionResult {
  /** The inferred version */
  version: string;
  /** Type of version bump (major, minor, patch, or none) */
  bumpType: string;
}

/**
 * Result of changelog generation
 */
export interface JsGenerateResult {
  /** The generated markdown content */
  markdown: string;
  /** The version */
  version: string;
  /** Number of commits processed */
  commitCount: number;
}

/**
 * Result of a full release operation
 */
export interface JsReleaseResult {
  /** The version released */
  version: string;
  /** Number of commits processed */
  commitCount: number;
  /** Whether the changelog was updated */
  changelogUpdated: boolean;
}

/**
 * Show the next inferred version based on conventional commits
 *
 * @param options - Configuration options (optional)
 * @returns The inferred version and bump type
 *
 * @example
 * ```typescript
 * import { show } from '@nanodelabs/novalyn';
 * const result = await show({ cwd: '/path/to/repo' });
 * console.log(`Next version: ${result.version} (${result.bumpType})`);
 * ```
 */
export declare function show(options?: JsConfigOptions): Promise<JsVersionResult>;

/**
 * Generate a changelog block for the commits since the last release
 *
 * @param options - Configuration options (optional)
 * @returns The generated markdown and metadata
 *
 * @example
 * ```typescript
 * import { generate } from '@nanodelabs/novalyn';
 * const result = await generate({ cwd: '/path/to/repo' });
 * console.log(result.markdown);
 * ```
 */
export declare function generate(options?: JsConfigOptions): Promise<JsGenerateResult>;

/**
 * Run a full release: infer version, generate changelog, and optionally tag
 *
 * @param options - Configuration options (optional)
 * @returns Release result with metadata
 *
 * @example
 * ```typescript
 * import { release } from '@nanodelabs/novalyn';
 * const result = await release({ 
 *   cwd: '/path/to/repo',
 *   newVersion: '1.0.0' 
 * });
 * console.log(`Released ${result.version}`);
 * ```
 */
export declare function release(options?: JsConfigOptions): Promise<JsReleaseResult>;

/**
 * Get the current version from Cargo.toml
 *
 * @param cwd - Working directory (optional, defaults to current directory)
 * @returns The current version string
 */
export declare function getCurrentVersion(cwd?: string): string;
